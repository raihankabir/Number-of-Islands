public class Solution {
    public int NumIslands(char[,] grid) {
        int count = 0;

            for (int i = 0; i < grid.GetLength(0); i++)
            {
                for (int j = 0; j < grid.GetLength(1); j++)
                {
                    if (grid[i,j] == '1')
                    {
                        count++;
                        CrossOfAdj(grid, i, j);
                    }
                }
            }

            return count;
    }
    
    
        private void CrossOfAdj(char[,] grid, int i, int j)
        {
            Queue<Cell> neighbors = new Queue<Cell>();
            neighbors.Enqueue(new Cell() { Row = i, Col = j, Value = grid[i, j] });
            while (neighbors.Count > 0)
            {
                Cell node = neighbors.Dequeue();
                grid[node.Row, node.Col] = '0';

                foreach (Cell cell in GetNeighbors(grid, node))
                {
                    if (cell.Value == '1')
                        neighbors.Enqueue(cell);
                }
            }
        }

        private IList<Cell> GetNeighbors(char[,] grid, Cell node)
        {
            IList<Cell> neighbors = new List<Cell>();
            if (node.Row - 1 >= 0)
            {
                neighbors.Add(new Cell() {Row = node.Row -1, Col = node.Col, Value = grid[node.Row -1, node.Col]});
            }
            if (node.Row + 1 < grid.GetLength(0))
            {
                neighbors.Add(new Cell() { Row = node.Row + 1, Col = node.Col, Value = grid[node.Row + 1, node.Col] });
            }
            if (node.Col - 1 >= 0)
            {
                neighbors.Add(new Cell() { Row = node.Row, Col = node.Col - 1, Value = grid[node.Row, node.Col - 1] });
            }
            if (node.Col + 1 < grid.GetLength(1))
            {
                neighbors.Add(new Cell() { Row = node.Row, Col = node.Col + 1, Value = grid[node.Row, node.Col + 1] });
            }

            return neighbors;
        }

        class Cell
        {
            public int Row { get; set; }
            public int Col { get; set; }
            public char Value { get; set; }
        }
}
